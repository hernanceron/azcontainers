name: "Create Infraestructure"
on:
    workflow_run: 
        workflows: ["Create State File"]
        types: 
            - completed
    
    workflow_dispatch:
env:
    WORKING_DIR: "./infra"
    WORKING_CODE: "./aplicacion/go-transacciones"
    SUBSCRIPTION_ID: "e8c19839-7903-4c24-9401-ce4a476a4ce2"
jobs:
    create-infra:
        name: "Create infraestructure"
        runs-on: ubuntu-latest
        outputs:
          acr_name: ${{steps.output.outputs.acr_name}}
          acr_login_server: ${{steps.output.outputs.acr_login_server}}
          resource_group_name: ${{steps.output.outputs.resource_group_name}}
          environment_name: ${{steps.output.outputs.environment_name}}
          container_app_name: ${{steps.output.outputs.container_app_name}}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v3             
            - name: Azure Login
              uses: azure/login@v2
              with:
                creds: ${{secrets.AZURE_CREDENTIALS}}
            - name: Get Access Key
              id: get-access-key
              run: |
                PRIMARY_ACCESS_KEY=$(az storage account keys list --resource-group my-infra-state-rg --account-name myinfrastate --query "[0].value" --output tsv)
                echo "primary_access_key=$PRIMARY_ACCESS_KEY" >> $GITHUB_OUTPUT          
            - name: Terraform Init
              run: terraform init -reconfigure -input=false -backend-config="storage_account_name=myinfrastate" -backend-config="container_name=tfstate" -backend-config="access_key=${{steps.get-access-key.outputs.primary_access_key}}" -backend-config="key=dev/terraform.tfstate"
              working-directory: ${{env.WORKING_DIR}}
            - id: plan
              name: Terraform Plan 
              run: terraform plan -no-color -var subscription_id=$SUBSCRIPTION_ID
              working-directory: ${{env.WORKING_DIR}}
            - id: apply
              name: Terraform Apply
              run: terraform apply -auto-approve -var subscription_id=$SUBSCRIPTION_ID
              working-directory: ${{env.WORKING_DIR}}
            - id: output
              name: Terraform Output
              run: |
                echo "acr_name=$(terraform output -raw acrname)" >> $GITHUB_OUTPUT
                echo "acr_login_server=$(terraform output -raw acrnamelogin)" >> $GITHUB_OUTPUT
                echo "resource_group_name=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
                echo "environment_name=$(terraform output -raw environment_name)" >> $GITHUB_OUTPUT
                echo "container_app_name=$(terraform output -raw container_app_name)" >> $GITHUB_OUTPUT
              working-directory: ${{env.WORKING_DIR}}
    build-and-deploy:
      needs: create-infra
      runs-on: ubuntu-latest

      steps:
        - name: Checkout Code
          uses: actions/checkout@v4
        - name: Azure Login
          uses: azure/login@v2
          with:
            creds: ${{secrets.AZURE_CREDENTIALS}}       
        - name: Azure Login Container Registry
          uses: docker/login-action@v3
          with:
            registry: ${{ needs.create-infra.outputs.acr_name }}
            username: ${{secrets.AZURE_CLIENT_ID}}
            password: ${{secrets.AZURE_CLIENT_SECRET}}
        - name: Build and deploy Container App
          uses: azure/container-apps-deploy-action@v1
          with:
            appSourcePath: ${{ env.WORKING_CODE }}
            acrName: ${{ needs.create-infra.outputs.acr_login_server }}
            dockerfilePath: Dockerfile
            containerAppEnvironment: ${{needs.create-infra.outputs.environment_name}}
            containerAppName: ${{needs.create-infra.outputs.container_app_name}}
            resourceGroup: ${{needs.create-infra.outputs.resource_group_name}}