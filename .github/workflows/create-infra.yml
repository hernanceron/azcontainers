name: "Create Infraestructure"
on:
  workflow_dispatch:
    inputs:
      nombre_proyecto:
        required: true
        type: string
      location:
        required: true
        type: string
      port_context:
        required: true
        type: string

env:
    WORKING_DIR: "./infra"
    SUBSCRIPTION_ID: "e8c19839-7903-4c24-9401-ce4a476a4ce2"
    TENANT_ID: "32675c9c-0387-4f09-87e4-d57e0c4e1afc"
    PORT_CLIENT_ID: "TcsBC9CbZVFTeQyndwuMA8JoRHtp7XfC"
    PORT_CLIENT_SECRET: "2wbOjNOlpun9Xc13tBSQIv9kkRN6o1a0eEW3jUXo2igAZwiyLxxWyCJOJJtBKauQ"
    RUN_ID: ${{fromJson(inputs.port_context).runId}}
jobs:
    create-infra:
        name: "Create infraestructure"
        runs-on: ubuntu-latest
        outputs:
          acr_name: ${{steps.output.outputs.acr_name}}
          acr_login_server: ${{steps.output.outputs.acr_login_server}}
          resource_group_name: ${{steps.output.outputs.resource_group_name}}
          environment_name: ${{steps.output.outputs.environment_name}}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v3             
            - name: Azure Login
              uses: azure/login@v2
              with:
                creds: ${{secrets.AZURE_CREDENTIALS}}
            - name: Get Access Key
              id: get-access-key
              run: |
                PRIMARY_ACCESS_KEY=$(az storage account keys list --resource-group my-infra-state-rg --account-name myinfrastate --query "[0].value" --output tsv)
                echo "primary_access_key=$PRIMARY_ACCESS_KEY" >> $GITHUB_OUTPUT          
            - name: Terraform Init
              run: terraform init -reconfigure -input=false -backend-config="storage_account_name=myinfrastate" -backend-config="container_name=tfstate" -backend-config="access_key=${{steps.get-access-key.outputs.primary_access_key}}" -backend-config="key=dev/terraform.tfstate"
              working-directory: ${{env.WORKING_DIR}}
            - id: plan
              name: Terraform Plan 
              run: terraform plan -no-color -var subscription_id=$SUBSCRIPTION_ID -var port_client_id=$PORT_CLIENT_ID -var port_client_secret=$PORT_CLIENT_SECRET -var nombre_proyecto=${{github.event.inputs.nombre_proyecto}} -var location=${{ github.event.inputs.location}} -var port_run_id=$RUN_ID
              working-directory: ${{env.WORKING_DIR}}
            - id: log-plan
              name: Log in port del plan
              run: |
               curl -L 'https://api.getport.io/v1/actions/runs/$RUN_ID/logs' -H 'Content-Type: application/json' -H 'Authorization: ${{ secrets.PORT_API_KEY }}' -d '{  "message": "Se termino el plan" }
            - id: apply
              name: Terraform Apply
              run: terraform apply -auto-approve -var subscription_id=$SUBSCRIPTION_ID -var port_client_id=$PORT_CLIENT_ID -var port_client_secret=$PORT_CLIENT_SECRET -var nombre_proyecto=${{github.event.inputs.nombre_proyecto}} -var location=${{ github.event.inputs.location}} -var port_run_id=$RUN_ID
              working-directory: ${{env.WORKING_DIR}}
            - id: log-apply
              name: Log in port del apply
              run: |
               curl -L 'https://api.getport.io/v1/actions/runs/$RUN_ID/logs' -H 'Content-Type: application/json' -H 'Authorization: ${{ secrets.PORT_API_KEY }}' -d '{  "message": "Se termino el apply" }
            - id: output
              name: Terraform Output
              run: |
                echo "acr_name=$(terraform output -raw acrname)" >> $GITHUB_OUTPUT
                echo "acr_login_server=$(terraform output -raw acrnamelogin)" >> $GITHUB_OUTPUT
                echo "resource_group_name=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
                echo "environment_name=$(terraform output -raw environment_name)" >> $GITHUB_OUTPUT
              working-directory: ${{env.WORKING_DIR}}
  